
import javax.swing.JOptionPane;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;

import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Dan
 */
public class VendingMachine extends javax.swing.JFrame {
    
    
    
    //MY VARIABLES
    public static float[] price = {2f, 0.5f, 1f, 2f, 1f};
    public static int[] quantity = {0, 20, 20, 20, 20};
    
    public static double change;
    public static float cost= 0;
    public static double amountOfCashInserted;
    
    Basket _chocolate = new Basket();
    Basket _water = new Basket();
    Basket _drink = new Basket();
    Basket _snack = new Basket();
    Basket _sweet = new Basket();
    
    //An array list which stores the items which the customer selects
    static ArrayList<Basket> cart = new ArrayList<Basket>();
    static ArrayList<Basket> stock = new ArrayList<Basket>();
    
    //arrayIndex;
    
    /**
     * Creates new form VendingMachine
     */
    public VendingMachine() {
        initComponents();
        //An array of items to popultate the combo box with
        String[] menu = {"Chocolate", "Water", "Drink", "Snack", "Sweet"};
        
        
        //creating an object of the Bsket class
        //Naming the object and giving it values
        _chocolate.foodName = "Chocolate";
        _chocolate.price = 2;
        _chocolate.quantity = 20;
        _chocolate.code = 01;
        
        //Adding the object to the stock arraylist
        stock.add(_chocolate);
        
        //creating an object of the Bsket class
        //Naming the object and giving it values
        _water.foodName = "Water";
        _water.price = 0.5f;
        _water.quantity = 20;
        _water.code = 02;
        
        //Adding the object to the stock arraylist
        stock.add(_water);
        
        //creating an object of the Bsket class
        //Naming the object and giving it values
        _drink.foodName = "Drink";
        _drink.price = 1;
        _drink.quantity = 20;
        _drink.code = 03;
        
        //Adding the object to the stock arraylist
        stock.add(_drink);
        
        //creating an object of the Bsket class
        //Naming the object and giving it values
        _snack.foodName = "Snack";
        _snack.price = 2;
        _snack.quantity = 20;
        _snack.code = 04;
        
        //Adding the object to the stock arraylist
        stock.add(_snack);
        
        //creating an object of the Bsket class
        //Naming the object and giving it values
        _sweet.foodName = "Chocolate";
        _sweet.price = 1;
        _sweet.quantity = 20;
        _sweet.code = 05;
        
        //Adding the object to the stock arraylist
        stock.add(_sweet);
        
        //Setting the combo box to have the menu array as the default list
        DefaultComboBoxModel comboBox = new DefaultComboBoxModel(menu);
        ItemList.setModel(comboBox);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ItemList = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        BasketDisplay = new javax.swing.JTextPane();
        CashInsert = new javax.swing.JTextField();
        MachineScreen = new javax.swing.JLabel();
        SelectButton = new javax.swing.JButton();
        PayButton = new javax.swing.JButton();
        PriceScreen = new java.awt.Label();
        jScrollPane2 = new javax.swing.JScrollPane();
        ReceiptPrinter = new javax.swing.JTextPane();
        ClearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ItemList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mr Comerford" }));
        ItemList.setName("ItemList"); // NOI18N
        ItemList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemListActionPerformed(evt);
            }
        });

        BasketDisplay.setName("Basket"); // NOI18N
        jScrollPane1.setViewportView(BasketDisplay);

        CashInsert.setText("Insert Cash");
        CashInsert.setName("CashInput"); // NOI18N
        CashInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CashInsertActionPerformed(evt);
            }
        });

        MachineScreen.setText("Machine Screen");
        MachineScreen.setName("MachineScreen"); // NOI18N

        SelectButton.setText("Select");
        SelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectButtonActionPerformed(evt);
            }
        });

        PayButton.setText("Pay");
        PayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PayButtonActionPerformed(evt);
            }
        });

        PriceScreen.setText("Cost:");

        ReceiptPrinter.setName("Basket"); // NOI18N
        jScrollPane2.setViewportView(ReceiptPrinter);

        ClearButton.setText("Clear Screen");
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PriceScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(MachineScreen)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ItemList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CashInsert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PayButton)
                            .addComponent(SelectButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ClearButton)))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ItemList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelectButton))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(PriceScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CashInsert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(PayButton)))
                .addGap(26, 26, 26)
                .addComponent(MachineScreen)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ClearButton))
                .addContainerGap(86, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CashInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CashInsertActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CashInsertActionPerformed

    private void ItemListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemListActionPerformed
        
    }//GEN-LAST:event_ItemListActionPerformed

    private void SelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectButtonActionPerformed
        
        //Items string selected from the combo box is put into this variable
        String itemSelected = (ItemList.getSelectedItem().toString());
        
        //An if statement which checks what the string is e.g. Drink and checks if theres any in stock
        if(itemSelected.equals("Chocolate") && stock.get(0).quantity > 0)
        {
            //Reduce the stock of that item
            stock.get(0).quantity--;
            //Create a basket object
            Basket chocolate = new Basket();
            //Set the new objects properties  
            chocolate.foodName = "Chocolate";
            chocolate.price = 2;
            chocolate.quantity = 1;
            chocolate.code = 01;
            
            //Add the new object to the customers cart
            cart.add(chocolate);
            
            //Set the Basket display text to that of the name of the product
            BasketDisplay.setText(BasketDisplay.getText() + itemSelected + "\n");
        }
        else if(itemSelected.equals("Chocolate")&&stock.get(0).quantity <= 0)
        {
            //Display this message if the priduct is sold out
            MachineScreen.setText("Chocolate: Sold out");
        }
        
        if(itemSelected.equals("Water")&& stock.get(1).quantity > 0)
        {
            //Reduce the stock of that item
            stock.get(1).quantity--;
            //Create a basket object
            Basket water = new Basket();
            //Set the new objects properties 
            water.foodName = "Water";
            water.price = 0.5f;
            water.quantity = 1;
            water.code = 02;
            
            //Add the new object to the customers cart
            cart.add(water);
            
            //Set the Basket display text to that of the name of the product
            BasketDisplay.setText(BasketDisplay.getText() + itemSelected + "\n");
        }
        else if(itemSelected.equals("Water")&& stock.get(1).quantity <= 0)
        {
            //Display this message if the priduct is sold out
            MachineScreen.setText("Water: Sold out");
        }
        
        if(itemSelected.equals("Drink")&& stock.get(2).quantity > 0)
        {
            //Reduce the stock of that item
            stock.get(2).quantity--;
            //Set the new objects properties 
            Basket drink = new Basket();
            drink.foodName = "Drink";
            drink.price = 1;
            drink.quantity = 1;
            drink.code = 03;
            
            //Add the new object to the customers cart
            cart.add(drink);
            
            //Set the Basket display text to that of the name of the product
            BasketDisplay.setText(BasketDisplay.getText() + itemSelected + "\n");
        }
        else if(itemSelected.equals("Drink")&& stock.get(2).quantity <= 0)
        {
            //Display this message if the priduct is sold out
            MachineScreen.setText("Drink: Sold out");
        }
        
        if(itemSelected.equals("Snack")&& stock.get(3).quantity > 0)
        {
            //Reduce the stock of that item
            stock.get(3).quantity--;
            //Set the new objects properties 
            Basket snack = new Basket();
            snack.foodName = "Snack";
            snack.price = 2;
            snack.quantity = 1;
            snack.code = 04;
            
            //Add the new object to the customers cart
            cart.add(snack);
            
            //Set the Basket display text to that of the name of the product
            BasketDisplay.setText(BasketDisplay.getText() + itemSelected + "\n");
        }
        else if(itemSelected.equals("Snack")&& stock.get(3).quantity <= 0)
        {
            //Display this message if the priduct is sold out
            MachineScreen.setText("Snack: Sold out");
        }
        
        if(itemSelected.equals("Sweet")&& stock.get(4).quantity > 0)
        {
            //Reduce the stock of that item
            stock.get(4).quantity--;
            //Set the new objects properties 
            Basket sweet = new Basket();
            sweet.foodName = "Sweet";
            sweet.price = 1;
            sweet.quantity = 1;
            sweet.code = 05;
            
            //Add the new object to the customers cart
            cart.add(sweet);
            
            //Set the Basket display text to that of the name of the product
            BasketDisplay.setText(BasketDisplay.getText() + itemSelected + "\n");
        }
        else if(itemSelected.equals("Sweet")&& stock.get(4).quantity <= 0)
        {
            //Display this message if the priduct is sold out
            MachineScreen.setText("Sweet: Sold out");
        }
        
        //Get price of item
        getPrice();             
    }//GEN-LAST:event_SelectButtonActionPerformed

    
    
    private void PayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PayButtonActionPerformed
        Buy();
    }//GEN-LAST:event_PayButtonActionPerformed

    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        BasketDisplay.setText("");
        ReceiptPrinter.setText("");
        cart.clear();
        getPrice();
    }//GEN-LAST:event_ClearButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VendingMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VendingMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VendingMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VendingMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
       

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VendingMachine().setVisible(true);
            }
        });
    }
    
    public void getPrice()
    {
        cost = 0;
        for(Basket i : cart)
        {
            cost += i.price;
        }
        PriceScreen.setText("£" + Float.toString(cost));
    }
    
    //Function to print out a receipt and save to a text file
    public void Printer()
    {        
        //For each loop which prints all items in cart to a text pane
        for(Basket i : cart)
        {
            ReceiptPrinter.setText(ReceiptPrinter.getText() + i.foodName + " £" + i.price+ "\n");
            
        }    
        
        //Printing the total cost, cash used, and customer change
        ReceiptPrinter.setText(ReceiptPrinter.getText() + "---------------------\n");
        ReceiptPrinter.setText(ReceiptPrinter.getText() + "Total cost: £" + cost + "\n");
        ReceiptPrinter.setText(ReceiptPrinter.getText() + "Cash inserted: £" + amountOfCashInserted + "\n"); 
        ReceiptPrinter.setText(ReceiptPrinter.getText() + "Customer change: £" + change);
        //ReceiptPrinter.setText(ReceiptPrinter.getText() + "Total items bought" + cart.size());
        
        
            
        ReceiptPrinter.setText(ReceiptPrinter.getText() + "\n \nOrder complete, basket emptied");
        
        //Creating an object of the PrintWriter class
        PrintWriter writer = null;
        try
        {
            //Creating an object of the FileWriter class, passing in a name for the file to be called, and passing in false so it overwrites the file and doesn't append it 
            FileWriter fileWriter = new FileWriter("VendingMachineReceipt.txt", false);
            writer = new PrintWriter(fileWriter);
            
        }catch(FileNotFoundException e)
        {
            e.printStackTrace();
        }
        catch(IOException e)
        {
            e.printStackTrace();
            
        }
        
        //For each loop which prints every item in the cart to the text file
        for(Basket i : cart)
        {
            writer.println(i.foodName + " £" + i.price + " Quantity: " + i.quantity);
        }
        
        //prints the total cost, cash inserted and customer change to the text file
        writer.println("Total cost of basket: £" + cost);
        writer.println("Cash inserted: " + amountOfCashInserted);
        writer.println("Customer change: " + change);
       
        
        
        writer.close();
        
        //Empties the cart once transaction is complete
        cart.clear();
    }     
    
    public void Buy()
    {
        //Setting the amountOfCashInserted variable from the figure entered into the text field
        amountOfCashInserted = Double.parseDouble(CashInsert.getText());
        
         
        //An if statement to decide if the customer has entered enough cash
        if(amountOfCashInserted >= cost)
        {
            //A successful transaction
            MachineScreen.setText("Please take your drink");
            //Calculating the change 
            change = amountOfCashInserted - cost;
            //Printing the change
            PriceScreen.setText("Your change is: " + Double.toString(change));
            
            
            ///removeItemsFromStock();
            //calling the printer function
            Printer();
            
        }else if(amountOfCashInserted < cost)
        {
            //Unsucessful transaction
            MachineScreen.setText("Insufficient amount");
            refillStock();
            //cart.clear();
        }
        else
        {
            MachineScreen.setText("Sold out");
            cart.clear();
            cost =0;
        }            
    }
    
    /*
    public void removeItemsFromStock()
    {
        for(Basket i : cart)
        {
            if(i.foodName.equals("Chocolate"))
            {
                _chocolate.quantity = _chocolate.quantity - 1;
            }
            if(i.foodName.equals("Water"))
            {
                _water.quantity -= 1;
            }
            if(i.foodName.equals("Drink"))
            {
                _drink.quantity -= 1;
            }
            if(i.foodName.equals("Snack"))
            {
                _snack.quantity -= 1;
            }
            if(i.foodName.equals("Sweet"))
            {
                _sweet.quantity -= 1;
            }
        } 
    }
*/

    
    //called if transactions fails, stock selected is put back into stock
    public void refillStock()
    {
        for(Basket i : cart)
        {
            if(i.foodName.equals("Chocolate"))
            {
                _chocolate.quantity = _chocolate.quantity + 1;
            }
            if(i.foodName.equals("Water"))
            {
                _water.quantity += 1;
            }
            if(i.foodName.equals("Drink"))
            {
                _drink.quantity += 1;
            }
            if(i.foodName.equals("Snack"))
            {
                _snack.quantity += 1;
            }
            if(i.foodName.equals("Sweet"))
            {
                _sweet.quantity += 1;
            }
        } 
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane BasketDisplay;
    private javax.swing.JTextField CashInsert;
    private javax.swing.JButton ClearButton;
    private javax.swing.JComboBox<String> ItemList;
    private javax.swing.JLabel MachineScreen;
    private javax.swing.JButton PayButton;
    private java.awt.Label PriceScreen;
    private javax.swing.JTextPane ReceiptPrinter;
    private javax.swing.JButton SelectButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
